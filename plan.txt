

-critic:

-account MUSIC system:
-upload music and album art
-signify if album, ep, or single
-

-browse page is list of albums with art, name, artist, type
-very very important that the feeling is about the user, their vision and journey - adventure - into the music and art




-small area for social...


FEATURES:
-user can post album URL to make thread about the album, then embeds that album object into thread post
-playlist


-browse by artists/albums
-shows list of new albums (algorithm will need attention on its own)
-






(directives for use in browse window:)
ALBUM-PREVIEW:
-album art
-artist name
-optional promotional "sticker"
-friend critic score

ARTIST-PREVIEW:
-artist picture
-friended critics who follow them





-ARTIST PAGE:
-top five tracks (artist can choose to display most listened to or his favorites)
-releases
-cool bio if wanted
-promo image
-merch
-similar artists

ALBUMS on artist page: when click an album the album page display disappears and shows just that album with the tracks which you can click to play or add to playlist... also can show connected discussions, critique, and friends etc

:at the bottom of the page: critics, discussion, and general activity about the artist/albums









CRITIC:
shows reviews of releases by artists (stripped down RYM)

ACCOUNT PAGE:
-artist name: ()

SOCIAL SYSTEM:
-critic: SN
-artist: artist name
-commune: can be anonymous or otherwise
-social: more focused on IRL side (live shows etc)

FRIEND SYSTEM:
-read critic reviews and then add people who you like
-when you follow someone you get their critic activity on your feed?
-see the albums they like and it can recommend you automatically at the top of your browse page




sit down, log in... goes to home page:
-album collection, click "play" on the album and it enlarges the album view
-begins playing album in music player
-can add and remove from playlist


WEBSITE SETTINGS:

ACCOUNT SETTINGS:

ARTIST PAGE:
-upload music
-customize album page
-customize your artist page

ACCOUNT LIBRARY:
-every account has personal library
-displays in page like browser with all artists/albums/songs
-can play music from there by double clicking




current goals:
-make an albumPreview directive (copy a lot from the catalog area)
-make an album page directive
-make a simple music player
-get music to display properly
-when one song ends, play the next one
-add song to a playlist
-remove song from a playlist
-remove multiple songs by clicking and dragging

(directive)
MUSICPLAYER:
-shows current song
-shows small album art icon
-time bar
-time displays
MUSICCONTROLLER:
-play
-volume
-back/forward









-go to next track -> goes to next track
-go to last track -> if currentTime >3 seconds, goes to last track
-



-now playing list... when click to play a song, adds to a list
-when album is done playing, goes to next album page in list and plays...
-if no more albums in artist list, goes to another artist!

-when ppl upload files, remove spaces
-when presses play, audio pauses or plays




IF LOGGED IN: can add to playlist, can add to library,



-add 1 to all array info to get proper track # rep
-get album length and store in a variable inside factory
-store current track # in a variable by searching array and returning the number that it's at any time the track changes
-check if current track === length of array (if it does, then don't do anything at end ... yet)
-if it gets to end, set nowPlayingList.nowPlayingTrack to the next track in the array



-click now playing album icon/or song data to go to album page
-play random track from browse page (make 'noise' icon)
-add album to library from browse page
-column browser, library
-spacebar controls the pause button
-now playing icon next to currently playing song
-list other albums by artist at bottom of album detail view



-how to add songs to library......
->click to add album (adds songs that aren't added)
->click to add song (if already in, won't add)
->gets the album object and artist object and adds all the tracks



myLibrary:
-loads the whole library
-ng-repeat into a table... artists, albums, tracks at bottom
-click artist to only show those albums, and then only show tracks in albums shown


library = array of artists


addToLibrary: takes that album, gets the artist name and adds to array as artistname, adds album to albums part of that array (With tracks etc)
-for artist already in there: searches to see if that artist is already there, if so returns that and adds album to that part
-if album already there, 

artists: artists in library

albums: albums in artists

tracks: ng-repeat tracks in albums




add:
-needs to check if data is in the library
-

































































































































































































































































































-remove duplicates in library
-make the library respond to double-clicking
-hilight things that are clicked






-loop through library, set var isIn to false and if that variable is set to that, then add
in scope.albums... find the name of the 









				for (i=0; i<libraryData.library.length; i++){
					for (j=0; j<libraryData.library[i].albums.length; j++){
						albums.push(libraryData.library[i].albums[j])
					}
				}
				console.log(albums)
				return albums



	  	}



	  	scope.getCurrentTracks = function(tracks){
	  		currentTracks = []

	  		//iterate over tracks
	  		for (i=0; i<scope.tracks.length; i++){
	  			var trackTitle = scope.tracks[i].trackTitle
	  			var trackNumber = scope.tracks[i].trackNumber
	  			var albumTitle = undefined
	  			var artistTitle = undefined
	  			//find album
	  			for (j=0; j<scope.albums.length; j++){
	  				var albumCheck = scope.albums[j]
	  				for (k=0; k<scope.albumCheck.tracks.length; k++){
	  					if (scope.albumCheck.tracks[k].trackTitle===trackTitle){
	  						//track's album title:
	  						var albumTitle = albumCheck.albumTitle
	  						console.log(albumTitle)
	  					}
	  				}
	  			}
	  			for (j=0; j<scope.artists.length){
	  				var artistCheck = scope.artists[j]
	  				for (k=0; k<scope.artistCheck.albums.length; k++){
	  					if (scope.artistCheck.albums[k]===albumTitle){
	  						var artistTitle = artistCheck.artist
	  						console.log(artistTitle)
	  					}
	  				}
	  			}
	  			currentTracks.push({trackTitle:trackTitle, albumTitle:albumTitle, artistTitle:artistTitle, trackNumber:trackNumber})
	  			
	  		}
	  		return currentTracks
	  	}







